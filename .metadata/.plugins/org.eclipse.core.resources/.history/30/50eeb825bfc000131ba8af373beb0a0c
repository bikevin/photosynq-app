package com.photosynq.app;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.json.JSONException;
import org.json.JSONObject;

import android.util.Log;

import com.photosynq.app.utils.JSONBuilder;

public class NetworkLoginThread extends Thread {

	final static String url = "http://photosynq.venturit.org/api/v1/sign_in.json";
	String name;
	String password;
	JSONObject credentials;
	JSONObject user;
	JSONObject responseJSON;

	int TIMEOUT_MILLISEC = 10000;

	public NetworkLoginThread(String name, String password) {
		this.name = name;
		this.password = password;
	}

	@Override
	public void run() {
		int TIMEOUT_MILLISEC = 10000;
		HttpParams httpParams = new BasicHttpParams();
		HttpConnectionParams.setConnectionTimeout(httpParams, TIMEOUT_MILLISEC);
		HttpConnectionParams.setSoTimeout(httpParams, TIMEOUT_MILLISEC);
		HttpClient httpclient = new DefaultHttpClient();
		HttpPost request = new HttpPost(url);
		// pass the client the HttpParms to define some of its characteristics

		credentials = new JSONObject();
		user = new JSONObject();
		try {
			Log.d("Test Thread", "name" + " " + name);
			Log.d("Test Thread", "password" + " " + password);
			credentials.put("email", name);
			credentials.put("password", password);

			user.put("user", credentials);
			Log.d("Test Thread", "user" + " " + user.toString());

		} catch (JSONException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		StringEntity input = null;

		// pass the object into a string entity
		try {
			input = new StringEntity(user.toString());
		} catch (UnsupportedEncodingException e1) {
			e1.printStackTrace();
		}

		input.setContentType("application/json");

		// pass the entity into a HttpPost request
		request.setEntity(input);
		InputStream is = null;

		try {

			// execute a request and get a response
			HttpResponse response = httpclient.execute(request);
			HttpEntity entityResponse = response.getEntity();
			// get the entity from the response
			is = entityResponse.getContent();
			responseJSON = buildJSON(is);
			Log.d("Test Thread", "JSONObject" + " " + responseJSON.toString());
		} catch (Exception e) {
			Log.d("error", e.toString());
		}

		String responseString = returnString(is);

		Log.d("Test Thread", responseString);

		super.run();
	}

	public JSONObject getResponseJSON() {
		return this.responseJSON;
	}

	private JSONObject buildJSON(InputStream is) {
		JSONBuilder jsonBuilder = new JSONBuilder();
		String jsonString = jsonBuilder.buildJSONString(is);
		Log.d("Test Thread", "return" + " " + jsonString);
		JSONObject jsonObject = jsonBuilder.buildJSONObject(jsonString);
		return jsonObject;

	}

	private String returnString(InputStream is) {
		StringBuilder sb = new StringBuilder();
		try {
			BufferedReader reader = new BufferedReader(
					new InputStreamReader(is));
			String line = null;
			while ((line = reader.readLine()) != null) {
				sb.append(line + "\n");
			}
			is.close();
		} catch (Exception e) {
			System.out.println(e.toString());
		}

		return sb.toString();
	}

}